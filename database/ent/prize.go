// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hero/database/ent/prize"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Prize is the model entity for the Prize schema.
type Prize struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SocialUserID holds the value of the "social_user_id" field.
	SocialUserID string `json:"social_user_id,omitempty"`
	// Date holds the value of the "date" field.
	Date string `json:"date,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Prize) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // social_user_id
		&sql.NullString{}, // date
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Prize fields.
func (pr *Prize) assignValues(values ...interface{}) error {
	if m, n := len(values), len(prize.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field social_user_id", values[0])
	} else if value.Valid {
		pr.SocialUserID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field date", values[1])
	} else if value.Valid {
		pr.Date = value.String
	}
	return nil
}

// Update returns a builder for updating this Prize.
// Note that, you need to call Prize.Unwrap() before calling this method, if this Prize
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Prize) Update() *PrizeUpdateOne {
	return (&PrizeClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Prize) Unwrap() *Prize {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Prize is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Prize) String() string {
	var builder strings.Builder
	builder.WriteString("Prize(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", social_user_id=")
	builder.WriteString(pr.SocialUserID)
	builder.WriteString(", date=")
	builder.WriteString(pr.Date)
	builder.WriteByte(')')
	return builder.String()
}

// Prizes is a parsable slice of Prize.
type Prizes []*Prize

func (pr Prizes) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
