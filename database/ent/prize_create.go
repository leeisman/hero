// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hero/database/ent/prize"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// PrizeCreate is the builder for creating a Prize entity.
type PrizeCreate struct {
	config
	mutation *PrizeMutation
	hooks    []Hook
}

// SetSocialUserID sets the social_user_id field.
func (pc *PrizeCreate) SetSocialUserID(s string) *PrizeCreate {
	pc.mutation.SetSocialUserID(s)
	return pc
}

// SetNillableSocialUserID sets the social_user_id field if the given value is not nil.
func (pc *PrizeCreate) SetNillableSocialUserID(s *string) *PrizeCreate {
	if s != nil {
		pc.SetSocialUserID(*s)
	}
	return pc
}

// SetDate sets the date field.
func (pc *PrizeCreate) SetDate(s string) *PrizeCreate {
	pc.mutation.SetDate(s)
	return pc
}

// SetNillableDate sets the date field if the given value is not nil.
func (pc *PrizeCreate) SetNillableDate(s *string) *PrizeCreate {
	if s != nil {
		pc.SetDate(*s)
	}
	return pc
}

// Save creates the Prize in the database.
func (pc *PrizeCreate) Save(ctx context.Context) (*Prize, error) {
	if _, ok := pc.mutation.SocialUserID(); !ok {
		v := prize.DefaultSocialUserID
		pc.mutation.SetSocialUserID(v)
	}
	var (
		err  error
		node *Prize
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PrizeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PrizeCreate) SaveX(ctx context.Context) *Prize {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PrizeCreate) sqlSave(ctx context.Context) (*Prize, error) {
	var (
		pr    = &Prize{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: prize.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: prize.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.SocialUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prize.FieldSocialUserID,
		})
		pr.SocialUserID = value
	}
	if value, ok := pc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prize.FieldDate,
		})
		pr.Date = value
	}
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}
