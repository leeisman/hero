// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hero/database/ent/useractiverecord"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
)

// UserActiveRecord is the model entity for the UserActiveRecord schema.
type UserActiveRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// ActiveType holds the value of the "active_type" field.
	ActiveType string `json:"active_type,omitempty"`
	// Score holds the value of the "score" field.
	Score int `json:"score,omitempty"`
	// IsFinished holds the value of the "is_finished" field.
	IsFinished uint `json:"is_finished,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// EndedAt holds the value of the "ended_at" field.
	EndedAt *time.Time `json:"ended_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserActiveRecord) scanValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // id
		&sql.NullString{}, // user_id
		&sql.NullString{}, // active_type
		&sql.NullInt64{},  // score
		&sql.NullInt64{},  // is_finished
		&sql.NullTime{},   // started_at
		&sql.NullTime{},   // ended_at
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserActiveRecord fields.
func (uar *UserActiveRecord) assignValues(values ...interface{}) error {
	if m, n := len(values), len(useractiverecord.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value.Valid {
		uar.ID = value.String
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field user_id", values[0])
	} else if value.Valid {
		uar.UserID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field active_type", values[1])
	} else if value.Valid {
		uar.ActiveType = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field score", values[2])
	} else if value.Valid {
		uar.Score = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field is_finished", values[3])
	} else if value.Valid {
		uar.IsFinished = uint(value.Int64)
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field started_at", values[4])
	} else if value.Valid {
		uar.StartedAt = new(time.Time)
		*uar.StartedAt = value.Time
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field ended_at", values[5])
	} else if value.Valid {
		uar.EndedAt = new(time.Time)
		*uar.EndedAt = value.Time
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[6])
	} else if value.Valid {
		uar.CreatedAt = new(time.Time)
		*uar.CreatedAt = value.Time
	}
	if value, ok := values[7].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[7])
	} else if value.Valid {
		uar.UpdatedAt = new(time.Time)
		*uar.UpdatedAt = value.Time
	}
	return nil
}

// Update returns a builder for updating this UserActiveRecord.
// Note that, you need to call UserActiveRecord.Unwrap() before calling this method, if this UserActiveRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (uar *UserActiveRecord) Update() *UserActiveRecordUpdateOne {
	return (&UserActiveRecordClient{config: uar.config}).UpdateOne(uar)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (uar *UserActiveRecord) Unwrap() *UserActiveRecord {
	tx, ok := uar.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserActiveRecord is not a transactional entity")
	}
	uar.config.driver = tx.drv
	return uar
}

// String implements the fmt.Stringer.
func (uar *UserActiveRecord) String() string {
	var builder strings.Builder
	builder.WriteString("UserActiveRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", uar.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(uar.UserID)
	builder.WriteString(", active_type=")
	builder.WriteString(uar.ActiveType)
	builder.WriteString(", score=")
	builder.WriteString(fmt.Sprintf("%v", uar.Score))
	builder.WriteString(", is_finished=")
	builder.WriteString(fmt.Sprintf("%v", uar.IsFinished))
	if v := uar.StartedAt; v != nil {
		builder.WriteString(", started_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := uar.EndedAt; v != nil {
		builder.WriteString(", ended_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := uar.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := uar.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// UserActiveRecords is a parsable slice of UserActiveRecord.
type UserActiveRecords []*UserActiveRecord

func (uar UserActiveRecords) config(cfg config) {
	for _i := range uar {
		uar[_i].config = cfg
	}
}
