// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hero/database/ent/predicate"
	"hero/database/ent/useractiverecord"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserActiveRecordUpdate is the builder for updating UserActiveRecord entities.
type UserActiveRecordUpdate struct {
	config
	hooks      []Hook
	mutation   *UserActiveRecordMutation
	predicates []predicate.UserActiveRecord
}

// Where adds a new predicate for the builder.
func (uaru *UserActiveRecordUpdate) Where(ps ...predicate.UserActiveRecord) *UserActiveRecordUpdate {
	uaru.predicates = append(uaru.predicates, ps...)
	return uaru
}

// SetUserID sets the user_id field.
func (uaru *UserActiveRecordUpdate) SetUserID(s string) *UserActiveRecordUpdate {
	uaru.mutation.SetUserID(s)
	return uaru
}

// SetNillableUserID sets the user_id field if the given value is not nil.
func (uaru *UserActiveRecordUpdate) SetNillableUserID(s *string) *UserActiveRecordUpdate {
	if s != nil {
		uaru.SetUserID(*s)
	}
	return uaru
}

// ClearUserID clears the value of user_id.
func (uaru *UserActiveRecordUpdate) ClearUserID() *UserActiveRecordUpdate {
	uaru.mutation.ClearUserID()
	return uaru
}

// SetActiveType sets the active_type field.
func (uaru *UserActiveRecordUpdate) SetActiveType(s string) *UserActiveRecordUpdate {
	uaru.mutation.SetActiveType(s)
	return uaru
}

// SetScore sets the score field.
func (uaru *UserActiveRecordUpdate) SetScore(i int) *UserActiveRecordUpdate {
	uaru.mutation.ResetScore()
	uaru.mutation.SetScore(i)
	return uaru
}

// SetNillableScore sets the score field if the given value is not nil.
func (uaru *UserActiveRecordUpdate) SetNillableScore(i *int) *UserActiveRecordUpdate {
	if i != nil {
		uaru.SetScore(*i)
	}
	return uaru
}

// AddScore adds i to score.
func (uaru *UserActiveRecordUpdate) AddScore(i int) *UserActiveRecordUpdate {
	uaru.mutation.AddScore(i)
	return uaru
}

// ClearScore clears the value of score.
func (uaru *UserActiveRecordUpdate) ClearScore() *UserActiveRecordUpdate {
	uaru.mutation.ClearScore()
	return uaru
}

// SetIsFinished sets the is_finished field.
func (uaru *UserActiveRecordUpdate) SetIsFinished(u uint) *UserActiveRecordUpdate {
	uaru.mutation.ResetIsFinished()
	uaru.mutation.SetIsFinished(u)
	return uaru
}

// SetNillableIsFinished sets the is_finished field if the given value is not nil.
func (uaru *UserActiveRecordUpdate) SetNillableIsFinished(u *uint) *UserActiveRecordUpdate {
	if u != nil {
		uaru.SetIsFinished(*u)
	}
	return uaru
}

// AddIsFinished adds u to is_finished.
func (uaru *UserActiveRecordUpdate) AddIsFinished(u uint) *UserActiveRecordUpdate {
	uaru.mutation.AddIsFinished(u)
	return uaru
}

// SetStartedAt sets the started_at field.
func (uaru *UserActiveRecordUpdate) SetStartedAt(t time.Time) *UserActiveRecordUpdate {
	uaru.mutation.SetStartedAt(t)
	return uaru
}

// SetNillableStartedAt sets the started_at field if the given value is not nil.
func (uaru *UserActiveRecordUpdate) SetNillableStartedAt(t *time.Time) *UserActiveRecordUpdate {
	if t != nil {
		uaru.SetStartedAt(*t)
	}
	return uaru
}

// ClearStartedAt clears the value of started_at.
func (uaru *UserActiveRecordUpdate) ClearStartedAt() *UserActiveRecordUpdate {
	uaru.mutation.ClearStartedAt()
	return uaru
}

// SetEndedAt sets the ended_at field.
func (uaru *UserActiveRecordUpdate) SetEndedAt(t time.Time) *UserActiveRecordUpdate {
	uaru.mutation.SetEndedAt(t)
	return uaru
}

// SetNillableEndedAt sets the ended_at field if the given value is not nil.
func (uaru *UserActiveRecordUpdate) SetNillableEndedAt(t *time.Time) *UserActiveRecordUpdate {
	if t != nil {
		uaru.SetEndedAt(*t)
	}
	return uaru
}

// ClearEndedAt clears the value of ended_at.
func (uaru *UserActiveRecordUpdate) ClearEndedAt() *UserActiveRecordUpdate {
	uaru.mutation.ClearEndedAt()
	return uaru
}

// SetCreatedAt sets the created_at field.
func (uaru *UserActiveRecordUpdate) SetCreatedAt(t time.Time) *UserActiveRecordUpdate {
	uaru.mutation.SetCreatedAt(t)
	return uaru
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uaru *UserActiveRecordUpdate) SetNillableCreatedAt(t *time.Time) *UserActiveRecordUpdate {
	if t != nil {
		uaru.SetCreatedAt(*t)
	}
	return uaru
}

// ClearCreatedAt clears the value of created_at.
func (uaru *UserActiveRecordUpdate) ClearCreatedAt() *UserActiveRecordUpdate {
	uaru.mutation.ClearCreatedAt()
	return uaru
}

// SetUpdatedAt sets the updated_at field.
func (uaru *UserActiveRecordUpdate) SetUpdatedAt(t time.Time) *UserActiveRecordUpdate {
	uaru.mutation.SetUpdatedAt(t)
	return uaru
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (uaru *UserActiveRecordUpdate) SetNillableUpdatedAt(t *time.Time) *UserActiveRecordUpdate {
	if t != nil {
		uaru.SetUpdatedAt(*t)
	}
	return uaru
}

// ClearUpdatedAt clears the value of updated_at.
func (uaru *UserActiveRecordUpdate) ClearUpdatedAt() *UserActiveRecordUpdate {
	uaru.mutation.ClearUpdatedAt()
	return uaru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uaru *UserActiveRecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uaru.hooks) == 0 {
		affected, err = uaru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserActiveRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uaru.mutation = mutation
			affected, err = uaru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uaru.hooks) - 1; i >= 0; i-- {
			mut = uaru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uaru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uaru *UserActiveRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := uaru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uaru *UserActiveRecordUpdate) Exec(ctx context.Context) error {
	_, err := uaru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uaru *UserActiveRecordUpdate) ExecX(ctx context.Context) {
	if err := uaru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uaru *UserActiveRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useractiverecord.Table,
			Columns: useractiverecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: useractiverecord.FieldID,
			},
		},
	}
	if ps := uaru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uaru.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useractiverecord.FieldUserID,
		})
	}
	if uaru.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: useractiverecord.FieldUserID,
		})
	}
	if value, ok := uaru.mutation.ActiveType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useractiverecord.FieldActiveType,
		})
	}
	if value, ok := uaru.mutation.Score(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: useractiverecord.FieldScore,
		})
	}
	if value, ok := uaru.mutation.AddedScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: useractiverecord.FieldScore,
		})
	}
	if uaru.mutation.ScoreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: useractiverecord.FieldScore,
		})
	}
	if value, ok := uaru.mutation.IsFinished(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: useractiverecord.FieldIsFinished,
		})
	}
	if value, ok := uaru.mutation.AddedIsFinished(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: useractiverecord.FieldIsFinished,
		})
	}
	if value, ok := uaru.mutation.StartedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useractiverecord.FieldStartedAt,
		})
	}
	if uaru.mutation.StartedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useractiverecord.FieldStartedAt,
		})
	}
	if value, ok := uaru.mutation.EndedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useractiverecord.FieldEndedAt,
		})
	}
	if uaru.mutation.EndedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useractiverecord.FieldEndedAt,
		})
	}
	if value, ok := uaru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useractiverecord.FieldCreatedAt,
		})
	}
	if uaru.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useractiverecord.FieldCreatedAt,
		})
	}
	if value, ok := uaru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useractiverecord.FieldUpdatedAt,
		})
	}
	if uaru.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useractiverecord.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uaru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useractiverecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserActiveRecordUpdateOne is the builder for updating a single UserActiveRecord entity.
type UserActiveRecordUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserActiveRecordMutation
}

// SetUserID sets the user_id field.
func (uaruo *UserActiveRecordUpdateOne) SetUserID(s string) *UserActiveRecordUpdateOne {
	uaruo.mutation.SetUserID(s)
	return uaruo
}

// SetNillableUserID sets the user_id field if the given value is not nil.
func (uaruo *UserActiveRecordUpdateOne) SetNillableUserID(s *string) *UserActiveRecordUpdateOne {
	if s != nil {
		uaruo.SetUserID(*s)
	}
	return uaruo
}

// ClearUserID clears the value of user_id.
func (uaruo *UserActiveRecordUpdateOne) ClearUserID() *UserActiveRecordUpdateOne {
	uaruo.mutation.ClearUserID()
	return uaruo
}

// SetActiveType sets the active_type field.
func (uaruo *UserActiveRecordUpdateOne) SetActiveType(s string) *UserActiveRecordUpdateOne {
	uaruo.mutation.SetActiveType(s)
	return uaruo
}

// SetScore sets the score field.
func (uaruo *UserActiveRecordUpdateOne) SetScore(i int) *UserActiveRecordUpdateOne {
	uaruo.mutation.ResetScore()
	uaruo.mutation.SetScore(i)
	return uaruo
}

// SetNillableScore sets the score field if the given value is not nil.
func (uaruo *UserActiveRecordUpdateOne) SetNillableScore(i *int) *UserActiveRecordUpdateOne {
	if i != nil {
		uaruo.SetScore(*i)
	}
	return uaruo
}

// AddScore adds i to score.
func (uaruo *UserActiveRecordUpdateOne) AddScore(i int) *UserActiveRecordUpdateOne {
	uaruo.mutation.AddScore(i)
	return uaruo
}

// ClearScore clears the value of score.
func (uaruo *UserActiveRecordUpdateOne) ClearScore() *UserActiveRecordUpdateOne {
	uaruo.mutation.ClearScore()
	return uaruo
}

// SetIsFinished sets the is_finished field.
func (uaruo *UserActiveRecordUpdateOne) SetIsFinished(u uint) *UserActiveRecordUpdateOne {
	uaruo.mutation.ResetIsFinished()
	uaruo.mutation.SetIsFinished(u)
	return uaruo
}

// SetNillableIsFinished sets the is_finished field if the given value is not nil.
func (uaruo *UserActiveRecordUpdateOne) SetNillableIsFinished(u *uint) *UserActiveRecordUpdateOne {
	if u != nil {
		uaruo.SetIsFinished(*u)
	}
	return uaruo
}

// AddIsFinished adds u to is_finished.
func (uaruo *UserActiveRecordUpdateOne) AddIsFinished(u uint) *UserActiveRecordUpdateOne {
	uaruo.mutation.AddIsFinished(u)
	return uaruo
}

// SetStartedAt sets the started_at field.
func (uaruo *UserActiveRecordUpdateOne) SetStartedAt(t time.Time) *UserActiveRecordUpdateOne {
	uaruo.mutation.SetStartedAt(t)
	return uaruo
}

// SetNillableStartedAt sets the started_at field if the given value is not nil.
func (uaruo *UserActiveRecordUpdateOne) SetNillableStartedAt(t *time.Time) *UserActiveRecordUpdateOne {
	if t != nil {
		uaruo.SetStartedAt(*t)
	}
	return uaruo
}

// ClearStartedAt clears the value of started_at.
func (uaruo *UserActiveRecordUpdateOne) ClearStartedAt() *UserActiveRecordUpdateOne {
	uaruo.mutation.ClearStartedAt()
	return uaruo
}

// SetEndedAt sets the ended_at field.
func (uaruo *UserActiveRecordUpdateOne) SetEndedAt(t time.Time) *UserActiveRecordUpdateOne {
	uaruo.mutation.SetEndedAt(t)
	return uaruo
}

// SetNillableEndedAt sets the ended_at field if the given value is not nil.
func (uaruo *UserActiveRecordUpdateOne) SetNillableEndedAt(t *time.Time) *UserActiveRecordUpdateOne {
	if t != nil {
		uaruo.SetEndedAt(*t)
	}
	return uaruo
}

// ClearEndedAt clears the value of ended_at.
func (uaruo *UserActiveRecordUpdateOne) ClearEndedAt() *UserActiveRecordUpdateOne {
	uaruo.mutation.ClearEndedAt()
	return uaruo
}

// SetCreatedAt sets the created_at field.
func (uaruo *UserActiveRecordUpdateOne) SetCreatedAt(t time.Time) *UserActiveRecordUpdateOne {
	uaruo.mutation.SetCreatedAt(t)
	return uaruo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uaruo *UserActiveRecordUpdateOne) SetNillableCreatedAt(t *time.Time) *UserActiveRecordUpdateOne {
	if t != nil {
		uaruo.SetCreatedAt(*t)
	}
	return uaruo
}

// ClearCreatedAt clears the value of created_at.
func (uaruo *UserActiveRecordUpdateOne) ClearCreatedAt() *UserActiveRecordUpdateOne {
	uaruo.mutation.ClearCreatedAt()
	return uaruo
}

// SetUpdatedAt sets the updated_at field.
func (uaruo *UserActiveRecordUpdateOne) SetUpdatedAt(t time.Time) *UserActiveRecordUpdateOne {
	uaruo.mutation.SetUpdatedAt(t)
	return uaruo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (uaruo *UserActiveRecordUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserActiveRecordUpdateOne {
	if t != nil {
		uaruo.SetUpdatedAt(*t)
	}
	return uaruo
}

// ClearUpdatedAt clears the value of updated_at.
func (uaruo *UserActiveRecordUpdateOne) ClearUpdatedAt() *UserActiveRecordUpdateOne {
	uaruo.mutation.ClearUpdatedAt()
	return uaruo
}

// Save executes the query and returns the updated entity.
func (uaruo *UserActiveRecordUpdateOne) Save(ctx context.Context) (*UserActiveRecord, error) {
	var (
		err  error
		node *UserActiveRecord
	)
	if len(uaruo.hooks) == 0 {
		node, err = uaruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserActiveRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uaruo.mutation = mutation
			node, err = uaruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uaruo.hooks) - 1; i >= 0; i-- {
			mut = uaruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uaruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uaruo *UserActiveRecordUpdateOne) SaveX(ctx context.Context) *UserActiveRecord {
	uar, err := uaruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return uar
}

// Exec executes the query on the entity.
func (uaruo *UserActiveRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := uaruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uaruo *UserActiveRecordUpdateOne) ExecX(ctx context.Context) {
	if err := uaruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uaruo *UserActiveRecordUpdateOne) sqlSave(ctx context.Context) (uar *UserActiveRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useractiverecord.Table,
			Columns: useractiverecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: useractiverecord.FieldID,
			},
		},
	}
	id, ok := uaruo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing UserActiveRecord.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := uaruo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useractiverecord.FieldUserID,
		})
	}
	if uaruo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: useractiverecord.FieldUserID,
		})
	}
	if value, ok := uaruo.mutation.ActiveType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useractiverecord.FieldActiveType,
		})
	}
	if value, ok := uaruo.mutation.Score(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: useractiverecord.FieldScore,
		})
	}
	if value, ok := uaruo.mutation.AddedScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: useractiverecord.FieldScore,
		})
	}
	if uaruo.mutation.ScoreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: useractiverecord.FieldScore,
		})
	}
	if value, ok := uaruo.mutation.IsFinished(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: useractiverecord.FieldIsFinished,
		})
	}
	if value, ok := uaruo.mutation.AddedIsFinished(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: useractiverecord.FieldIsFinished,
		})
	}
	if value, ok := uaruo.mutation.StartedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useractiverecord.FieldStartedAt,
		})
	}
	if uaruo.mutation.StartedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useractiverecord.FieldStartedAt,
		})
	}
	if value, ok := uaruo.mutation.EndedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useractiverecord.FieldEndedAt,
		})
	}
	if uaruo.mutation.EndedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useractiverecord.FieldEndedAt,
		})
	}
	if value, ok := uaruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useractiverecord.FieldCreatedAt,
		})
	}
	if uaruo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useractiverecord.FieldCreatedAt,
		})
	}
	if value, ok := uaruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useractiverecord.FieldUpdatedAt,
		})
	}
	if uaruo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useractiverecord.FieldUpdatedAt,
		})
	}
	uar = &UserActiveRecord{config: uaruo.config}
	_spec.Assign = uar.assignValues
	_spec.ScanValues = uar.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uaruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useractiverecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return uar, nil
}
