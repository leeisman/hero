// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hero/database/ent/user"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetSocialUserID sets the social_user_id field.
func (uc *UserCreate) SetSocialUserID(s string) *UserCreate {
	uc.mutation.SetSocialUserID(s)
	return uc
}

// SetNillableSocialUserID sets the social_user_id field if the given value is not nil.
func (uc *UserCreate) SetNillableSocialUserID(s *string) *UserCreate {
	if s != nil {
		uc.SetSocialUserID(*s)
	}
	return uc
}

// SetSocialAvatarURL sets the social_avatar_url field.
func (uc *UserCreate) SetSocialAvatarURL(s string) *UserCreate {
	uc.mutation.SetSocialAvatarURL(s)
	return uc
}

// SetNillableSocialAvatarURL sets the social_avatar_url field if the given value is not nil.
func (uc *UserCreate) SetNillableSocialAvatarURL(s *string) *UserCreate {
	if s != nil {
		uc.SetSocialAvatarURL(*s)
	}
	return uc
}

// SetSocialEmail sets the social_email field.
func (uc *UserCreate) SetSocialEmail(s string) *UserCreate {
	uc.mutation.SetSocialEmail(s)
	return uc
}

// SetNillableSocialEmail sets the social_email field if the given value is not nil.
func (uc *UserCreate) SetNillableSocialEmail(s *string) *UserCreate {
	if s != nil {
		uc.SetSocialEmail(*s)
	}
	return uc
}

// SetSocialName sets the social_name field.
func (uc *UserCreate) SetSocialName(s string) *UserCreate {
	uc.mutation.SetSocialName(s)
	return uc
}

// SetNillableSocialName sets the social_name field if the given value is not nil.
func (uc *UserCreate) SetNillableSocialName(s *string) *UserCreate {
	if s != nil {
		uc.SetSocialName(*s)
	}
	return uc
}

// SetSocialType sets the social_type field.
func (uc *UserCreate) SetSocialType(s string) *UserCreate {
	uc.mutation.SetSocialType(s)
	return uc
}

// SetNillableSocialType sets the social_type field if the given value is not nil.
func (uc *UserCreate) SetNillableSocialType(s *string) *UserCreate {
	if s != nil {
		uc.SetSocialType(*s)
	}
	return uc
}

// SetSocialPayload sets the social_payload field.
func (uc *UserCreate) SetSocialPayload(s string) *UserCreate {
	uc.mutation.SetSocialPayload(s)
	return uc
}

// SetNillableSocialPayload sets the social_payload field if the given value is not nil.
func (uc *UserCreate) SetNillableSocialPayload(s *string) *UserCreate {
	if s != nil {
		uc.SetSocialPayload(*s)
	}
	return uc
}

// SetCreatedAt sets the created_at field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the updated_at field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetID sets the id field.
func (uc *UserCreate) SetID(s string) *UserCreate {
	uc.mutation.SetID(s)
	return uc
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	if _, ok := uc.mutation.SocialUserID(); !ok {
		v := user.DefaultSocialUserID
		uc.mutation.SetSocialUserID(v)
	}
	if _, ok := uc.mutation.SocialAvatarURL(); !ok {
		v := user.DefaultSocialAvatarURL
		uc.mutation.SetSocialAvatarURL(v)
	}
	if _, ok := uc.mutation.SocialEmail(); !ok {
		v := user.DefaultSocialEmail
		uc.mutation.SetSocialEmail(v)
	}
	if _, ok := uc.mutation.SocialName(); !ok {
		v := user.DefaultSocialName
		uc.mutation.SetSocialName(v)
	}
	if _, ok := uc.mutation.SocialType(); !ok {
		v := user.DefaultSocialType
		uc.mutation.SetSocialType(v)
	}
	if _, ok := uc.mutation.SocialPayload(); !ok {
		v := user.DefaultSocialPayload
		uc.mutation.SetSocialPayload(v)
	}
	var (
		err  error
		node *User
	)
	if len(uc.hooks) == 0 {
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uc.mutation = mutation
			node, err = uc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	var (
		u     = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		}
	)
	if id, ok := uc.mutation.ID(); ok {
		u.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.SocialUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSocialUserID,
		})
		u.SocialUserID = &value
	}
	if value, ok := uc.mutation.SocialAvatarURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSocialAvatarURL,
		})
		u.SocialAvatarURL = &value
	}
	if value, ok := uc.mutation.SocialEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSocialEmail,
		})
		u.SocialEmail = &value
	}
	if value, ok := uc.mutation.SocialName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSocialName,
		})
		u.SocialName = &value
	}
	if value, ok := uc.mutation.SocialType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSocialType,
		})
		u.SocialType = &value
	}
	if value, ok := uc.mutation.SocialPayload(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSocialPayload,
		})
		u.SocialPayload = &value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
		u.CreatedAt = &value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
		u.UpdatedAt = &value
	}
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return u, nil
}
