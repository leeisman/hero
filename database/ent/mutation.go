// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hero/database/ent/user"
	"hero/database/ent/useractiverecord"
	"sync"
	"time"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUser             = "User"
	TypeUserActiveRecord = "UserActiveRecord"
)

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op                Op
	typ               string
	id                *string
	social_user_id    *string
	social_avatar_url *string
	social_email      *string
	social_name       *string
	social_type       *string
	social_payload    *string
	hero_repeat       *uint
	addhero_repeat    *uint
	created_at        *time.Time
	updated_at        *time.Time
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on User creation.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSocialUserID sets the social_user_id field.
func (m *UserMutation) SetSocialUserID(s string) {
	m.social_user_id = &s
}

// SocialUserID returns the social_user_id value in the mutation.
func (m *UserMutation) SocialUserID() (r string, exists bool) {
	v := m.social_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSocialUserID returns the old social_user_id value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldSocialUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSocialUserID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSocialUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSocialUserID: %w", err)
	}
	return oldValue.SocialUserID, nil
}

// ResetSocialUserID reset all changes of the "social_user_id" field.
func (m *UserMutation) ResetSocialUserID() {
	m.social_user_id = nil
}

// SetSocialAvatarURL sets the social_avatar_url field.
func (m *UserMutation) SetSocialAvatarURL(s string) {
	m.social_avatar_url = &s
}

// SocialAvatarURL returns the social_avatar_url value in the mutation.
func (m *UserMutation) SocialAvatarURL() (r string, exists bool) {
	v := m.social_avatar_url
	if v == nil {
		return
	}
	return *v, true
}

// OldSocialAvatarURL returns the old social_avatar_url value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldSocialAvatarURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSocialAvatarURL is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSocialAvatarURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSocialAvatarURL: %w", err)
	}
	return oldValue.SocialAvatarURL, nil
}

// ResetSocialAvatarURL reset all changes of the "social_avatar_url" field.
func (m *UserMutation) ResetSocialAvatarURL() {
	m.social_avatar_url = nil
}

// SetSocialEmail sets the social_email field.
func (m *UserMutation) SetSocialEmail(s string) {
	m.social_email = &s
}

// SocialEmail returns the social_email value in the mutation.
func (m *UserMutation) SocialEmail() (r string, exists bool) {
	v := m.social_email
	if v == nil {
		return
	}
	return *v, true
}

// OldSocialEmail returns the old social_email value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldSocialEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSocialEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSocialEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSocialEmail: %w", err)
	}
	return oldValue.SocialEmail, nil
}

// ResetSocialEmail reset all changes of the "social_email" field.
func (m *UserMutation) ResetSocialEmail() {
	m.social_email = nil
}

// SetSocialName sets the social_name field.
func (m *UserMutation) SetSocialName(s string) {
	m.social_name = &s
}

// SocialName returns the social_name value in the mutation.
func (m *UserMutation) SocialName() (r string, exists bool) {
	v := m.social_name
	if v == nil {
		return
	}
	return *v, true
}

// OldSocialName returns the old social_name value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldSocialName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSocialName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSocialName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSocialName: %w", err)
	}
	return oldValue.SocialName, nil
}

// ResetSocialName reset all changes of the "social_name" field.
func (m *UserMutation) ResetSocialName() {
	m.social_name = nil
}

// SetSocialType sets the social_type field.
func (m *UserMutation) SetSocialType(s string) {
	m.social_type = &s
}

// SocialType returns the social_type value in the mutation.
func (m *UserMutation) SocialType() (r string, exists bool) {
	v := m.social_type
	if v == nil {
		return
	}
	return *v, true
}

// OldSocialType returns the old social_type value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldSocialType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSocialType is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSocialType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSocialType: %w", err)
	}
	return oldValue.SocialType, nil
}

// ResetSocialType reset all changes of the "social_type" field.
func (m *UserMutation) ResetSocialType() {
	m.social_type = nil
}

// SetSocialPayload sets the social_payload field.
func (m *UserMutation) SetSocialPayload(s string) {
	m.social_payload = &s
}

// SocialPayload returns the social_payload value in the mutation.
func (m *UserMutation) SocialPayload() (r string, exists bool) {
	v := m.social_payload
	if v == nil {
		return
	}
	return *v, true
}

// OldSocialPayload returns the old social_payload value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldSocialPayload(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSocialPayload is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSocialPayload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSocialPayload: %w", err)
	}
	return oldValue.SocialPayload, nil
}

// ResetSocialPayload reset all changes of the "social_payload" field.
func (m *UserMutation) ResetSocialPayload() {
	m.social_payload = nil
}

// SetHeroRepeat sets the hero_repeat field.
func (m *UserMutation) SetHeroRepeat(u uint) {
	m.hero_repeat = &u
	m.addhero_repeat = nil
}

// HeroRepeat returns the hero_repeat value in the mutation.
func (m *UserMutation) HeroRepeat() (r uint, exists bool) {
	v := m.hero_repeat
	if v == nil {
		return
	}
	return *v, true
}

// OldHeroRepeat returns the old hero_repeat value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldHeroRepeat(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHeroRepeat is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHeroRepeat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeroRepeat: %w", err)
	}
	return oldValue.HeroRepeat, nil
}

// AddHeroRepeat adds u to hero_repeat.
func (m *UserMutation) AddHeroRepeat(u uint) {
	if m.addhero_repeat != nil {
		*m.addhero_repeat += u
	} else {
		m.addhero_repeat = &u
	}
}

// AddedHeroRepeat returns the value that was added to the hero_repeat field in this mutation.
func (m *UserMutation) AddedHeroRepeat() (r uint, exists bool) {
	v := m.addhero_repeat
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeroRepeat reset all changes of the "hero_repeat" field.
func (m *UserMutation) ResetHeroRepeat() {
	m.hero_repeat = nil
	m.addhero_repeat = nil
}

// SetCreatedAt sets the created_at field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of created_at.
func (m *UserMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[user.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the field created_at was cleared in this mutation.
func (m *UserMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldCreatedAt]
	return ok
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, user.FieldCreatedAt)
}

// SetUpdatedAt sets the updated_at field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updated_at value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of updated_at.
func (m *UserMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[user.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the field updated_at was cleared in this mutation.
func (m *UserMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt reset all changes of the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, user.FieldUpdatedAt)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.social_user_id != nil {
		fields = append(fields, user.FieldSocialUserID)
	}
	if m.social_avatar_url != nil {
		fields = append(fields, user.FieldSocialAvatarURL)
	}
	if m.social_email != nil {
		fields = append(fields, user.FieldSocialEmail)
	}
	if m.social_name != nil {
		fields = append(fields, user.FieldSocialName)
	}
	if m.social_type != nil {
		fields = append(fields, user.FieldSocialType)
	}
	if m.social_payload != nil {
		fields = append(fields, user.FieldSocialPayload)
	}
	if m.hero_repeat != nil {
		fields = append(fields, user.FieldHeroRepeat)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldSocialUserID:
		return m.SocialUserID()
	case user.FieldSocialAvatarURL:
		return m.SocialAvatarURL()
	case user.FieldSocialEmail:
		return m.SocialEmail()
	case user.FieldSocialName:
		return m.SocialName()
	case user.FieldSocialType:
		return m.SocialType()
	case user.FieldSocialPayload:
		return m.SocialPayload()
	case user.FieldHeroRepeat:
		return m.HeroRepeat()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldSocialUserID:
		return m.OldSocialUserID(ctx)
	case user.FieldSocialAvatarURL:
		return m.OldSocialAvatarURL(ctx)
	case user.FieldSocialEmail:
		return m.OldSocialEmail(ctx)
	case user.FieldSocialName:
		return m.OldSocialName(ctx)
	case user.FieldSocialType:
		return m.OldSocialType(ctx)
	case user.FieldSocialPayload:
		return m.OldSocialPayload(ctx)
	case user.FieldHeroRepeat:
		return m.OldHeroRepeat(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldSocialUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSocialUserID(v)
		return nil
	case user.FieldSocialAvatarURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSocialAvatarURL(v)
		return nil
	case user.FieldSocialEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSocialEmail(v)
		return nil
	case user.FieldSocialName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSocialName(v)
		return nil
	case user.FieldSocialType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSocialType(v)
		return nil
	case user.FieldSocialPayload:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSocialPayload(v)
		return nil
	case user.FieldHeroRepeat:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeroRepeat(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addhero_repeat != nil {
		fields = append(fields, user.FieldHeroRepeat)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldHeroRepeat:
		return m.AddedHeroRepeat()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldHeroRepeat:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeroRepeat(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldCreatedAt) {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.FieldCleared(user.FieldUpdatedAt) {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldSocialUserID:
		m.ResetSocialUserID()
		return nil
	case user.FieldSocialAvatarURL:
		m.ResetSocialAvatarURL()
		return nil
	case user.FieldSocialEmail:
		m.ResetSocialEmail()
		return nil
	case user.FieldSocialName:
		m.ResetSocialName()
		return nil
	case user.FieldSocialType:
		m.ResetSocialType()
		return nil
	case user.FieldSocialPayload:
		m.ResetSocialPayload()
		return nil
	case user.FieldHeroRepeat:
		m.ResetHeroRepeat()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}

// UserActiveRecordMutation represents an operation that mutate the UserActiveRecords
// nodes in the graph.
type UserActiveRecordMutation struct {
	config
	op             Op
	typ            string
	id             *string
	user_id        *string
	active_type    *string
	score          *int
	addscore       *int
	is_finished    *uint
	addis_finished *uint
	started_at     *time.Time
	ended_at       *time.Time
	created_at     *time.Time
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*UserActiveRecord, error)
}

var _ ent.Mutation = (*UserActiveRecordMutation)(nil)

// useractiverecordOption allows to manage the mutation configuration using functional options.
type useractiverecordOption func(*UserActiveRecordMutation)

// newUserActiveRecordMutation creates new mutation for $n.Name.
func newUserActiveRecordMutation(c config, op Op, opts ...useractiverecordOption) *UserActiveRecordMutation {
	m := &UserActiveRecordMutation{
		config:        c,
		op:            op,
		typ:           TypeUserActiveRecord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserActiveRecordID sets the id field of the mutation.
func withUserActiveRecordID(id string) useractiverecordOption {
	return func(m *UserActiveRecordMutation) {
		var (
			err   error
			once  sync.Once
			value *UserActiveRecord
		)
		m.oldValue = func(ctx context.Context) (*UserActiveRecord, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserActiveRecord.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserActiveRecord sets the old UserActiveRecord of the mutation.
func withUserActiveRecord(node *UserActiveRecord) useractiverecordOption {
	return func(m *UserActiveRecordMutation) {
		m.oldValue = func(context.Context) (*UserActiveRecord, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserActiveRecordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserActiveRecordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on UserActiveRecord creation.
func (m *UserActiveRecordMutation) SetID(id string) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserActiveRecordMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserID sets the user_id field.
func (m *UserActiveRecordMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the user_id value in the mutation.
func (m *UserActiveRecordMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old user_id value of the UserActiveRecord.
// If the UserActiveRecord object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserActiveRecordMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID reset all changes of the "user_id" field.
func (m *UserActiveRecordMutation) ResetUserID() {
	m.user_id = nil
}

// SetActiveType sets the active_type field.
func (m *UserActiveRecordMutation) SetActiveType(s string) {
	m.active_type = &s
}

// ActiveType returns the active_type value in the mutation.
func (m *UserActiveRecordMutation) ActiveType() (r string, exists bool) {
	v := m.active_type
	if v == nil {
		return
	}
	return *v, true
}

// OldActiveType returns the old active_type value of the UserActiveRecord.
// If the UserActiveRecord object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserActiveRecordMutation) OldActiveType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldActiveType is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldActiveType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActiveType: %w", err)
	}
	return oldValue.ActiveType, nil
}

// ResetActiveType reset all changes of the "active_type" field.
func (m *UserActiveRecordMutation) ResetActiveType() {
	m.active_type = nil
}

// SetScore sets the score field.
func (m *UserActiveRecordMutation) SetScore(i int) {
	m.score = &i
	m.addscore = nil
}

// Score returns the score value in the mutation.
func (m *UserActiveRecordMutation) Score() (r int, exists bool) {
	v := m.score
	if v == nil {
		return
	}
	return *v, true
}

// OldScore returns the old score value of the UserActiveRecord.
// If the UserActiveRecord object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserActiveRecordMutation) OldScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldScore is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScore: %w", err)
	}
	return oldValue.Score, nil
}

// AddScore adds i to score.
func (m *UserActiveRecordMutation) AddScore(i int) {
	if m.addscore != nil {
		*m.addscore += i
	} else {
		m.addscore = &i
	}
}

// AddedScore returns the value that was added to the score field in this mutation.
func (m *UserActiveRecordMutation) AddedScore() (r int, exists bool) {
	v := m.addscore
	if v == nil {
		return
	}
	return *v, true
}

// ResetScore reset all changes of the "score" field.
func (m *UserActiveRecordMutation) ResetScore() {
	m.score = nil
	m.addscore = nil
}

// SetIsFinished sets the is_finished field.
func (m *UserActiveRecordMutation) SetIsFinished(u uint) {
	m.is_finished = &u
	m.addis_finished = nil
}

// IsFinished returns the is_finished value in the mutation.
func (m *UserActiveRecordMutation) IsFinished() (r uint, exists bool) {
	v := m.is_finished
	if v == nil {
		return
	}
	return *v, true
}

// OldIsFinished returns the old is_finished value of the UserActiveRecord.
// If the UserActiveRecord object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserActiveRecordMutation) OldIsFinished(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsFinished is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsFinished requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsFinished: %w", err)
	}
	return oldValue.IsFinished, nil
}

// AddIsFinished adds u to is_finished.
func (m *UserActiveRecordMutation) AddIsFinished(u uint) {
	if m.addis_finished != nil {
		*m.addis_finished += u
	} else {
		m.addis_finished = &u
	}
}

// AddedIsFinished returns the value that was added to the is_finished field in this mutation.
func (m *UserActiveRecordMutation) AddedIsFinished() (r uint, exists bool) {
	v := m.addis_finished
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsFinished reset all changes of the "is_finished" field.
func (m *UserActiveRecordMutation) ResetIsFinished() {
	m.is_finished = nil
	m.addis_finished = nil
}

// SetStartedAt sets the started_at field.
func (m *UserActiveRecordMutation) SetStartedAt(t time.Time) {
	m.started_at = &t
}

// StartedAt returns the started_at value in the mutation.
func (m *UserActiveRecordMutation) StartedAt() (r time.Time, exists bool) {
	v := m.started_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartedAt returns the old started_at value of the UserActiveRecord.
// If the UserActiveRecord object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserActiveRecordMutation) OldStartedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStartedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStartedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartedAt: %w", err)
	}
	return oldValue.StartedAt, nil
}

// ClearStartedAt clears the value of started_at.
func (m *UserActiveRecordMutation) ClearStartedAt() {
	m.started_at = nil
	m.clearedFields[useractiverecord.FieldStartedAt] = struct{}{}
}

// StartedAtCleared returns if the field started_at was cleared in this mutation.
func (m *UserActiveRecordMutation) StartedAtCleared() bool {
	_, ok := m.clearedFields[useractiverecord.FieldStartedAt]
	return ok
}

// ResetStartedAt reset all changes of the "started_at" field.
func (m *UserActiveRecordMutation) ResetStartedAt() {
	m.started_at = nil
	delete(m.clearedFields, useractiverecord.FieldStartedAt)
}

// SetEndedAt sets the ended_at field.
func (m *UserActiveRecordMutation) SetEndedAt(t time.Time) {
	m.ended_at = &t
}

// EndedAt returns the ended_at value in the mutation.
func (m *UserActiveRecordMutation) EndedAt() (r time.Time, exists bool) {
	v := m.ended_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndedAt returns the old ended_at value of the UserActiveRecord.
// If the UserActiveRecord object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserActiveRecordMutation) OldEndedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEndedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEndedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndedAt: %w", err)
	}
	return oldValue.EndedAt, nil
}

// ClearEndedAt clears the value of ended_at.
func (m *UserActiveRecordMutation) ClearEndedAt() {
	m.ended_at = nil
	m.clearedFields[useractiverecord.FieldEndedAt] = struct{}{}
}

// EndedAtCleared returns if the field ended_at was cleared in this mutation.
func (m *UserActiveRecordMutation) EndedAtCleared() bool {
	_, ok := m.clearedFields[useractiverecord.FieldEndedAt]
	return ok
}

// ResetEndedAt reset all changes of the "ended_at" field.
func (m *UserActiveRecordMutation) ResetEndedAt() {
	m.ended_at = nil
	delete(m.clearedFields, useractiverecord.FieldEndedAt)
}

// SetCreatedAt sets the created_at field.
func (m *UserActiveRecordMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *UserActiveRecordMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the UserActiveRecord.
// If the UserActiveRecord object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserActiveRecordMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of created_at.
func (m *UserActiveRecordMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[useractiverecord.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the field created_at was cleared in this mutation.
func (m *UserActiveRecordMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[useractiverecord.FieldCreatedAt]
	return ok
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *UserActiveRecordMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, useractiverecord.FieldCreatedAt)
}

// SetUpdatedAt sets the updated_at field.
func (m *UserActiveRecordMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *UserActiveRecordMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updated_at value of the UserActiveRecord.
// If the UserActiveRecord object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserActiveRecordMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of updated_at.
func (m *UserActiveRecordMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[useractiverecord.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the field updated_at was cleared in this mutation.
func (m *UserActiveRecordMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[useractiverecord.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt reset all changes of the "updated_at" field.
func (m *UserActiveRecordMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, useractiverecord.FieldUpdatedAt)
}

// Op returns the operation name.
func (m *UserActiveRecordMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserActiveRecord).
func (m *UserActiveRecordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserActiveRecordMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.user_id != nil {
		fields = append(fields, useractiverecord.FieldUserID)
	}
	if m.active_type != nil {
		fields = append(fields, useractiverecord.FieldActiveType)
	}
	if m.score != nil {
		fields = append(fields, useractiverecord.FieldScore)
	}
	if m.is_finished != nil {
		fields = append(fields, useractiverecord.FieldIsFinished)
	}
	if m.started_at != nil {
		fields = append(fields, useractiverecord.FieldStartedAt)
	}
	if m.ended_at != nil {
		fields = append(fields, useractiverecord.FieldEndedAt)
	}
	if m.created_at != nil {
		fields = append(fields, useractiverecord.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, useractiverecord.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserActiveRecordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case useractiverecord.FieldUserID:
		return m.UserID()
	case useractiverecord.FieldActiveType:
		return m.ActiveType()
	case useractiverecord.FieldScore:
		return m.Score()
	case useractiverecord.FieldIsFinished:
		return m.IsFinished()
	case useractiverecord.FieldStartedAt:
		return m.StartedAt()
	case useractiverecord.FieldEndedAt:
		return m.EndedAt()
	case useractiverecord.FieldCreatedAt:
		return m.CreatedAt()
	case useractiverecord.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserActiveRecordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case useractiverecord.FieldUserID:
		return m.OldUserID(ctx)
	case useractiverecord.FieldActiveType:
		return m.OldActiveType(ctx)
	case useractiverecord.FieldScore:
		return m.OldScore(ctx)
	case useractiverecord.FieldIsFinished:
		return m.OldIsFinished(ctx)
	case useractiverecord.FieldStartedAt:
		return m.OldStartedAt(ctx)
	case useractiverecord.FieldEndedAt:
		return m.OldEndedAt(ctx)
	case useractiverecord.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case useractiverecord.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserActiveRecord field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserActiveRecordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case useractiverecord.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case useractiverecord.FieldActiveType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActiveType(v)
		return nil
	case useractiverecord.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScore(v)
		return nil
	case useractiverecord.FieldIsFinished:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsFinished(v)
		return nil
	case useractiverecord.FieldStartedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartedAt(v)
		return nil
	case useractiverecord.FieldEndedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndedAt(v)
		return nil
	case useractiverecord.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case useractiverecord.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserActiveRecord field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserActiveRecordMutation) AddedFields() []string {
	var fields []string
	if m.addscore != nil {
		fields = append(fields, useractiverecord.FieldScore)
	}
	if m.addis_finished != nil {
		fields = append(fields, useractiverecord.FieldIsFinished)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserActiveRecordMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case useractiverecord.FieldScore:
		return m.AddedScore()
	case useractiverecord.FieldIsFinished:
		return m.AddedIsFinished()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserActiveRecordMutation) AddField(name string, value ent.Value) error {
	switch name {
	case useractiverecord.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScore(v)
		return nil
	case useractiverecord.FieldIsFinished:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsFinished(v)
		return nil
	}
	return fmt.Errorf("unknown UserActiveRecord numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserActiveRecordMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(useractiverecord.FieldStartedAt) {
		fields = append(fields, useractiverecord.FieldStartedAt)
	}
	if m.FieldCleared(useractiverecord.FieldEndedAt) {
		fields = append(fields, useractiverecord.FieldEndedAt)
	}
	if m.FieldCleared(useractiverecord.FieldCreatedAt) {
		fields = append(fields, useractiverecord.FieldCreatedAt)
	}
	if m.FieldCleared(useractiverecord.FieldUpdatedAt) {
		fields = append(fields, useractiverecord.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserActiveRecordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserActiveRecordMutation) ClearField(name string) error {
	switch name {
	case useractiverecord.FieldStartedAt:
		m.ClearStartedAt()
		return nil
	case useractiverecord.FieldEndedAt:
		m.ClearEndedAt()
		return nil
	case useractiverecord.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case useractiverecord.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown UserActiveRecord nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserActiveRecordMutation) ResetField(name string) error {
	switch name {
	case useractiverecord.FieldUserID:
		m.ResetUserID()
		return nil
	case useractiverecord.FieldActiveType:
		m.ResetActiveType()
		return nil
	case useractiverecord.FieldScore:
		m.ResetScore()
		return nil
	case useractiverecord.FieldIsFinished:
		m.ResetIsFinished()
		return nil
	case useractiverecord.FieldStartedAt:
		m.ResetStartedAt()
		return nil
	case useractiverecord.FieldEndedAt:
		m.ResetEndedAt()
		return nil
	case useractiverecord.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case useractiverecord.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown UserActiveRecord field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserActiveRecordMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserActiveRecordMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserActiveRecordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserActiveRecordMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserActiveRecordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserActiveRecordMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserActiveRecordMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserActiveRecord unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserActiveRecordMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserActiveRecord edge %s", name)
}
