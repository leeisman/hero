// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hero/database/ent/useractiverecord"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserActiveRecordCreate is the builder for creating a UserActiveRecord entity.
type UserActiveRecordCreate struct {
	config
	mutation *UserActiveRecordMutation
	hooks    []Hook
}

// SetUserID sets the user_id field.
func (uarc *UserActiveRecordCreate) SetUserID(s string) *UserActiveRecordCreate {
	uarc.mutation.SetUserID(s)
	return uarc
}

// SetNillableUserID sets the user_id field if the given value is not nil.
func (uarc *UserActiveRecordCreate) SetNillableUserID(s *string) *UserActiveRecordCreate {
	if s != nil {
		uarc.SetUserID(*s)
	}
	return uarc
}

// SetActiveType sets the active_type field.
func (uarc *UserActiveRecordCreate) SetActiveType(s string) *UserActiveRecordCreate {
	uarc.mutation.SetActiveType(s)
	return uarc
}

// SetScore sets the score field.
func (uarc *UserActiveRecordCreate) SetScore(i int) *UserActiveRecordCreate {
	uarc.mutation.SetScore(i)
	return uarc
}

// SetNillableScore sets the score field if the given value is not nil.
func (uarc *UserActiveRecordCreate) SetNillableScore(i *int) *UserActiveRecordCreate {
	if i != nil {
		uarc.SetScore(*i)
	}
	return uarc
}

// SetIsFinished sets the is_finished field.
func (uarc *UserActiveRecordCreate) SetIsFinished(u uint) *UserActiveRecordCreate {
	uarc.mutation.SetIsFinished(u)
	return uarc
}

// SetNillableIsFinished sets the is_finished field if the given value is not nil.
func (uarc *UserActiveRecordCreate) SetNillableIsFinished(u *uint) *UserActiveRecordCreate {
	if u != nil {
		uarc.SetIsFinished(*u)
	}
	return uarc
}

// SetStartedAt sets the started_at field.
func (uarc *UserActiveRecordCreate) SetStartedAt(t time.Time) *UserActiveRecordCreate {
	uarc.mutation.SetStartedAt(t)
	return uarc
}

// SetNillableStartedAt sets the started_at field if the given value is not nil.
func (uarc *UserActiveRecordCreate) SetNillableStartedAt(t *time.Time) *UserActiveRecordCreate {
	if t != nil {
		uarc.SetStartedAt(*t)
	}
	return uarc
}

// SetEndedAt sets the ended_at field.
func (uarc *UserActiveRecordCreate) SetEndedAt(t time.Time) *UserActiveRecordCreate {
	uarc.mutation.SetEndedAt(t)
	return uarc
}

// SetNillableEndedAt sets the ended_at field if the given value is not nil.
func (uarc *UserActiveRecordCreate) SetNillableEndedAt(t *time.Time) *UserActiveRecordCreate {
	if t != nil {
		uarc.SetEndedAt(*t)
	}
	return uarc
}

// SetCreatedAt sets the created_at field.
func (uarc *UserActiveRecordCreate) SetCreatedAt(t time.Time) *UserActiveRecordCreate {
	uarc.mutation.SetCreatedAt(t)
	return uarc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uarc *UserActiveRecordCreate) SetNillableCreatedAt(t *time.Time) *UserActiveRecordCreate {
	if t != nil {
		uarc.SetCreatedAt(*t)
	}
	return uarc
}

// SetUpdatedAt sets the updated_at field.
func (uarc *UserActiveRecordCreate) SetUpdatedAt(t time.Time) *UserActiveRecordCreate {
	uarc.mutation.SetUpdatedAt(t)
	return uarc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (uarc *UserActiveRecordCreate) SetNillableUpdatedAt(t *time.Time) *UserActiveRecordCreate {
	if t != nil {
		uarc.SetUpdatedAt(*t)
	}
	return uarc
}

// SetID sets the id field.
func (uarc *UserActiveRecordCreate) SetID(s string) *UserActiveRecordCreate {
	uarc.mutation.SetID(s)
	return uarc
}

// Save creates the UserActiveRecord in the database.
func (uarc *UserActiveRecordCreate) Save(ctx context.Context) (*UserActiveRecord, error) {
	if _, ok := uarc.mutation.ActiveType(); !ok {
		return nil, errors.New("ent: missing required field \"active_type\"")
	}
	if _, ok := uarc.mutation.Score(); !ok {
		v := useractiverecord.DefaultScore
		uarc.mutation.SetScore(v)
	}
	if _, ok := uarc.mutation.IsFinished(); !ok {
		v := useractiverecord.DefaultIsFinished
		uarc.mutation.SetIsFinished(v)
	}
	var (
		err  error
		node *UserActiveRecord
	)
	if len(uarc.hooks) == 0 {
		node, err = uarc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserActiveRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uarc.mutation = mutation
			node, err = uarc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uarc.hooks) - 1; i >= 0; i-- {
			mut = uarc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uarc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uarc *UserActiveRecordCreate) SaveX(ctx context.Context) *UserActiveRecord {
	v, err := uarc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uarc *UserActiveRecordCreate) sqlSave(ctx context.Context) (*UserActiveRecord, error) {
	var (
		uar   = &UserActiveRecord{config: uarc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: useractiverecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: useractiverecord.FieldID,
			},
		}
	)
	if id, ok := uarc.mutation.ID(); ok {
		uar.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uarc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useractiverecord.FieldUserID,
		})
		uar.UserID = &value
	}
	if value, ok := uarc.mutation.ActiveType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useractiverecord.FieldActiveType,
		})
		uar.ActiveType = value
	}
	if value, ok := uarc.mutation.Score(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: useractiverecord.FieldScore,
		})
		uar.Score = value
	}
	if value, ok := uarc.mutation.IsFinished(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: useractiverecord.FieldIsFinished,
		})
		uar.IsFinished = value
	}
	if value, ok := uarc.mutation.StartedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useractiverecord.FieldStartedAt,
		})
		uar.StartedAt = &value
	}
	if value, ok := uarc.mutation.EndedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useractiverecord.FieldEndedAt,
		})
		uar.EndedAt = &value
	}
	if value, ok := uarc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useractiverecord.FieldCreatedAt,
		})
		uar.CreatedAt = &value
	}
	if value, ok := uarc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useractiverecord.FieldUpdatedAt,
		})
		uar.UpdatedAt = &value
	}
	if err := sqlgraph.CreateNode(ctx, uarc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return uar, nil
}
