// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hero/database/ent/predicate"
	"hero/database/ent/useractiverecord"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserActiveRecordQuery is the builder for querying UserActiveRecord entities.
type UserActiveRecordQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.UserActiveRecord
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (uarq *UserActiveRecordQuery) Where(ps ...predicate.UserActiveRecord) *UserActiveRecordQuery {
	uarq.predicates = append(uarq.predicates, ps...)
	return uarq
}

// Limit adds a limit step to the query.
func (uarq *UserActiveRecordQuery) Limit(limit int) *UserActiveRecordQuery {
	uarq.limit = &limit
	return uarq
}

// Offset adds an offset step to the query.
func (uarq *UserActiveRecordQuery) Offset(offset int) *UserActiveRecordQuery {
	uarq.offset = &offset
	return uarq
}

// Order adds an order step to the query.
func (uarq *UserActiveRecordQuery) Order(o ...OrderFunc) *UserActiveRecordQuery {
	uarq.order = append(uarq.order, o...)
	return uarq
}

// First returns the first UserActiveRecord entity in the query. Returns *NotFoundError when no useractiverecord was found.
func (uarq *UserActiveRecordQuery) First(ctx context.Context) (*UserActiveRecord, error) {
	uars, err := uarq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(uars) == 0 {
		return nil, &NotFoundError{useractiverecord.Label}
	}
	return uars[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uarq *UserActiveRecordQuery) FirstX(ctx context.Context) *UserActiveRecord {
	uar, err := uarq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return uar
}

// FirstID returns the first UserActiveRecord id in the query. Returns *NotFoundError when no id was found.
func (uarq *UserActiveRecordQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = uarq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{useractiverecord.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (uarq *UserActiveRecordQuery) FirstXID(ctx context.Context) string {
	id, err := uarq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only UserActiveRecord entity in the query, returns an error if not exactly one entity was returned.
func (uarq *UserActiveRecordQuery) Only(ctx context.Context) (*UserActiveRecord, error) {
	uars, err := uarq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(uars) {
	case 1:
		return uars[0], nil
	case 0:
		return nil, &NotFoundError{useractiverecord.Label}
	default:
		return nil, &NotSingularError{useractiverecord.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uarq *UserActiveRecordQuery) OnlyX(ctx context.Context) *UserActiveRecord {
	uar, err := uarq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return uar
}

// OnlyID returns the only UserActiveRecord id in the query, returns an error if not exactly one id was returned.
func (uarq *UserActiveRecordQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = uarq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{useractiverecord.Label}
	default:
		err = &NotSingularError{useractiverecord.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (uarq *UserActiveRecordQuery) OnlyXID(ctx context.Context) string {
	id, err := uarq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserActiveRecords.
func (uarq *UserActiveRecordQuery) All(ctx context.Context) ([]*UserActiveRecord, error) {
	if err := uarq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return uarq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (uarq *UserActiveRecordQuery) AllX(ctx context.Context) []*UserActiveRecord {
	uars, err := uarq.All(ctx)
	if err != nil {
		panic(err)
	}
	return uars
}

// IDs executes the query and returns a list of UserActiveRecord ids.
func (uarq *UserActiveRecordQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := uarq.Select(useractiverecord.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uarq *UserActiveRecordQuery) IDsX(ctx context.Context) []string {
	ids, err := uarq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uarq *UserActiveRecordQuery) Count(ctx context.Context) (int, error) {
	if err := uarq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return uarq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (uarq *UserActiveRecordQuery) CountX(ctx context.Context) int {
	count, err := uarq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uarq *UserActiveRecordQuery) Exist(ctx context.Context) (bool, error) {
	if err := uarq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return uarq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (uarq *UserActiveRecordQuery) ExistX(ctx context.Context) bool {
	exist, err := uarq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uarq *UserActiveRecordQuery) Clone() *UserActiveRecordQuery {
	return &UserActiveRecordQuery{
		config:     uarq.config,
		limit:      uarq.limit,
		offset:     uarq.offset,
		order:      append([]OrderFunc{}, uarq.order...),
		unique:     append([]string{}, uarq.unique...),
		predicates: append([]predicate.UserActiveRecord{}, uarq.predicates...),
		// clone intermediate query.
		sql:  uarq.sql.Clone(),
		path: uarq.path,
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID string `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserActiveRecord.Query().
//		GroupBy(useractiverecord.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (uarq *UserActiveRecordQuery) GroupBy(field string, fields ...string) *UserActiveRecordGroupBy {
	group := &UserActiveRecordGroupBy{config: uarq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := uarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return uarq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		UserID string `json:"user_id,omitempty"`
//	}
//
//	client.UserActiveRecord.Query().
//		Select(useractiverecord.FieldUserID).
//		Scan(ctx, &v)
//
func (uarq *UserActiveRecordQuery) Select(field string, fields ...string) *UserActiveRecordSelect {
	selector := &UserActiveRecordSelect{config: uarq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := uarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return uarq.sqlQuery(), nil
	}
	return selector
}

func (uarq *UserActiveRecordQuery) prepareQuery(ctx context.Context) error {
	if uarq.path != nil {
		prev, err := uarq.path(ctx)
		if err != nil {
			return err
		}
		uarq.sql = prev
	}
	return nil
}

func (uarq *UserActiveRecordQuery) sqlAll(ctx context.Context) ([]*UserActiveRecord, error) {
	var (
		nodes = []*UserActiveRecord{}
		_spec = uarq.querySpec()
	)
	_spec.ScanValues = func() []interface{} {
		node := &UserActiveRecord{config: uarq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, uarq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (uarq *UserActiveRecordQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uarq.querySpec()
	return sqlgraph.CountNodes(ctx, uarq.driver, _spec)
}

func (uarq *UserActiveRecordQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := uarq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (uarq *UserActiveRecordQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useractiverecord.Table,
			Columns: useractiverecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: useractiverecord.FieldID,
			},
		},
		From:   uarq.sql,
		Unique: true,
	}
	if ps := uarq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uarq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uarq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uarq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uarq *UserActiveRecordQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(uarq.driver.Dialect())
	t1 := builder.Table(useractiverecord.Table)
	selector := builder.Select(t1.Columns(useractiverecord.Columns...)...).From(t1)
	if uarq.sql != nil {
		selector = uarq.sql
		selector.Select(selector.Columns(useractiverecord.Columns...)...)
	}
	for _, p := range uarq.predicates {
		p(selector)
	}
	for _, p := range uarq.order {
		p(selector)
	}
	if offset := uarq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uarq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserActiveRecordGroupBy is the builder for group-by UserActiveRecord entities.
type UserActiveRecordGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (uargb *UserActiveRecordGroupBy) Aggregate(fns ...AggregateFunc) *UserActiveRecordGroupBy {
	uargb.fns = append(uargb.fns, fns...)
	return uargb
}

// Scan applies the group-by query and scan the result into the given value.
func (uargb *UserActiveRecordGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := uargb.path(ctx)
	if err != nil {
		return err
	}
	uargb.sql = query
	return uargb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (uargb *UserActiveRecordGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := uargb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (uargb *UserActiveRecordGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(uargb.fields) > 1 {
		return nil, errors.New("ent: UserActiveRecordGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := uargb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (uargb *UserActiveRecordGroupBy) StringsX(ctx context.Context) []string {
	v, err := uargb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.

func (uargb *UserActiveRecordGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(uargb.fields) > 1 {
		return nil, errors.New("ent: UserActiveRecordGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := uargb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (uargb *UserActiveRecordGroupBy) IntsX(ctx context.Context) []int {
	v, err := uargb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (uargb *UserActiveRecordGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(uargb.fields) > 1 {
		return nil, errors.New("ent: UserActiveRecordGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := uargb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (uargb *UserActiveRecordGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := uargb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (uargb *UserActiveRecordGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(uargb.fields) > 1 {
		return nil, errors.New("ent: UserActiveRecordGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := uargb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (uargb *UserActiveRecordGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := uargb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uargb *UserActiveRecordGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := uargb.sqlQuery().Query()
	if err := uargb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (uargb *UserActiveRecordGroupBy) sqlQuery() *sql.Selector {
	selector := uargb.sql
	columns := make([]string, 0, len(uargb.fields)+len(uargb.fns))
	columns = append(columns, uargb.fields...)
	for _, fn := range uargb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(uargb.fields...)
}

// UserActiveRecordSelect is the builder for select fields of UserActiveRecord entities.
type UserActiveRecordSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (uars *UserActiveRecordSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := uars.path(ctx)
	if err != nil {
		return err
	}
	uars.sql = query
	return uars.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (uars *UserActiveRecordSelect) ScanX(ctx context.Context, v interface{}) {
	if err := uars.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (uars *UserActiveRecordSelect) Strings(ctx context.Context) ([]string, error) {
	if len(uars.fields) > 1 {
		return nil, errors.New("ent: UserActiveRecordSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := uars.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (uars *UserActiveRecordSelect) StringsX(ctx context.Context) []string {
	v, err := uars.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (uars *UserActiveRecordSelect) Ints(ctx context.Context) ([]int, error) {
	if len(uars.fields) > 1 {
		return nil, errors.New("ent: UserActiveRecordSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := uars.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (uars *UserActiveRecordSelect) IntsX(ctx context.Context) []int {
	v, err := uars.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (uars *UserActiveRecordSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(uars.fields) > 1 {
		return nil, errors.New("ent: UserActiveRecordSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := uars.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (uars *UserActiveRecordSelect) Float64sX(ctx context.Context) []float64 {
	v, err := uars.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (uars *UserActiveRecordSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(uars.fields) > 1 {
		return nil, errors.New("ent: UserActiveRecordSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := uars.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (uars *UserActiveRecordSelect) BoolsX(ctx context.Context) []bool {
	v, err := uars.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uars *UserActiveRecordSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := uars.sqlQuery().Query()
	if err := uars.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (uars *UserActiveRecordSelect) sqlQuery() sql.Querier {
	selector := uars.sql
	selector.Select(selector.Columns(uars.fields...)...)
	return selector
}
